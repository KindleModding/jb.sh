###
# Based on NiLuJe's Bridge upstart script
###

# The updated framework job is the root of our problems, so start well after it ;).
start on framework_ready
stop on stopping framework

export LANG LC_ALL

pre-start script
	[ -f "/etc/upstart/functions" ] && source /etc/upstart/functions

	f_log I bridge start "" "hello there from kmc.conf!"

	BRIDGE_EMERGENCY="/mnt/us/emergency.sh"

	# First things first, check for an emergency script
	if [ -f "${BRIDGE_EMERGENCY}" ] ; then
		# We got one, make it executable and use it
		[ -x "${BRIDGE_EMERGENCY}" ] || chmod +x "${BRIDGE_EMERGENCY}"
		# Run it...
		f_log I bridge start "" "starting bridge emergency script"
		/bin/sh "${BRIDGE_EMERGENCY}"
		# And GET OUT! NOW!
		return 0
	fi

	make_mutable() {
		local my_path="${1}"
		# NOTE: Can't do that on symlinks, hence the hoop-jumping...
		if [ -d "${my_path}" ] ; then
			find "${my_path}" -type d -exec chattr -i '{}' \;
			find "${my_path}" -type f -exec chattr -i '{}' \;
		elif [ -f "${my_path}" ] ; then
			chattr -i "${my_path}"
		fi
	}

	make_immutable() {
		local my_path="${1}"
		if [ -d "${my_path}" ] ; then
			find "${my_path}" -type d -exec chattr +i '{}' \;
			find "${my_path}" -type f -exec chattr +i '{}' \;
		elif [ -f "${my_path}" ] ; then
			chattr +i "${my_path}"
		fi
	}

    ###
    # This is 900% ancient hotfix tech
    ###

	# Barring that, let's fix our stuff up...
	MKK_PERSISTENT_STORAGE="/var/local/mkk"
	KMC_PERSISTENT_STORAGE="/var/local/kmc"

	# Get the Kindle's architecture
	ARCH="armel"
	# Check if the Kindle is ARMHF or ARMEL
	if [ -f /lib/ld-linux-armhf.so.3 ]; then
		ARCH="armhf"
	fi

	# Permissions fixups...
	make_mutable "${MKK_PERSISTENT_STORAGE}"
	for my_path in "${MKK_PERSISTENT_STORAGE}" ; do
		if [ -d "${my_path}" ] ; then
			# Not ours? Fix it!
			if [ ! -O "${my_path}" ] || [ ! -G "${my_path}" ] ; then
				chown -R root:root "${my_path}"
			fi
			# Has a crappy setgid bit set? Kill it!
			if [ -g "${my_path}" ] ; then
				chmod g-s "${my_path}"
			fi
		fi
	done

	###
	# Fix permissions for KMC (MKK doesn't need this)
	###
	make_mutable "${MKK_PERSISTENT_STORAGE}"
	f_log "I" "install" "" "Fixing KMC permissions"
	chmod 0664 "${KMC_PERSISTENT_STORAGE}/kmc.conf"
	chmod -R a+rx "${KMC_PERSISTENT_STORAGE}/armel/*"
	chmod -R a+rx "${KMC_PERSISTENT_STORAGE}/armhf/*"
	chmod a+rx "${KMC_PERSISTENT_STORAGE}/persistence/dispatch.sh"
	chmod a+rx "${KMC_PERSISTENT_STORAGE}/persistence/run_persistence.sh"
	chmod a+rx "${KMC_PERSISTENT_STORAGE}/persistence/persistence.sh"

	# Fix Gandalf permissions
	f_log "I" "install" "" "Fixing KMC gandalf permissions"
	chown root:root "${KMC_PERSISTENT_STORAGE}/armel/bin/gandalf"
	chmod a+rx "${KMC_PERSISTENT_STORAGE}/armel/bin/gandalf"
	chmod +s "${KMC_PERSISTENT_STORAGE}/armel/bin/gandalf"
	chown root:root "${KMC_PERSISTENT_STORAGE}/armhf/bin/gandalf"
	chmod a+rx "${KMC_PERSISTENT_STORAGE}/armhf/bin/gandalf"
	chmod +s "${KMC_PERSISTENT_STORAGE}/armhf/bin/gandalf"

	f_log "I" "install" "" "Installing KMC binaries for ${ARCH}"
	make_mutable "${KMC_PERSISTENT_STORAGE}/bin"
	make_mutable "${KMC_PERSISTENT_STORAGE}/lib"
	rm -rf "${KMC_PERSISTENT_STORAGE}/lib"
	rm -rf "${KMC_PERSISTENT_STORAGE}/bin"
	ln -sf "${KMC_PERSISTENT_STORAGE}/${ARCH}/lib" "${KMC_PERSISTENT_STORAGE}/lib"
	ln -sf "${KMC_PERSISTENT_STORAGE}/${ARCH}/bin" "${KMC_PERSISTENT_STORAGE}/bin"
	# Since the links to these binaries are SOFT links, no additional copying/linking is required
	make_immutable "${MKK_PERSISTENT_STORAGE}/bin"
	make_immutable "${MKK_PERSISTENT_STORAGE}/lib"
	make_immutable "${MKK_PERSISTENT_STORAGE}"

	f_log I bridge start "" "so uncivilized"

	return 0
end script
